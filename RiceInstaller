#!/bin/sh
# Colors
CRE=$(tput setaf 1)    # Red
CYE=$(tput setaf 3)    # Yellow
CGR=$(tput setaf 2)    # Green
CBL=$(tput setaf 4)    # Blue
BLD=$(tput bold)       # Bold
CNC=$(tput sgr0)       # Reset colors

# Global vars
backup_folder=~/.g3kBackup
ERROR_LOG="$HOME/g3kError.log"

# Logo
logo() {
    text="$1"
    printf "%b" "
               %%%
        %%%%%//%%%%%
      %%************%%%
  (%%//############*****%%
 %%%%**###&&&&&&&&&###**//
 %%(**##&&&#########&&&##**
 %%(**##*****#####*****##**%%%
 %%(**##     *****     ##**
   //##   @@**   @@   ##//
     ##     **###     ##
     #######     #####//
       ###**&&&&&**###
       &&&         &&&
       &&&////   &&
          &&//@@@**
            ..***

   ${BLD}${CRE}[ ${CYE}${text} ${CRE}]${CNC}\n\n"
}

# Handle errors
log_error() {
    error_msg=$1
    timestamp=$(date +"%Y-%m-%d %H:%M:%S")

    printf "%s" "[${timestamp}] ERROR: ${error_msg}\n" >> "$ERROR_LOG"
    printf "%s%sERROR:%s %s\n" "${CRE}" "${BLD}" "${CNC}" "${error_msg}" >&2
}

# Verificaciones iniciales
initial_checks() {
    # Verificar usuario root
    if [ "$(id -u)" = 0 ]; then
        log_error "This script MUST NOT be run as root user."
        exit 1
    fi

    # Verificar directorio HOME
    if [ "$PWD" != "$HOME" ]; then
        log_error "The script must be executed from HOME directory."
        exit 1
    fi

    # Verificar conexión a internet
    if ! ping -q -c 1 -W 1 8.8.8.8 >/dev/null 2>&1; then
        log_error "No internet connection detected."
        exit 1
    fi
}

# Internal verification function
is_installed() {
    pacman -Qq "$1" >/dev/null 2>&1
}

is_reflector() {
    if ! command -v reflector >/dev/null 2>&1; then
        # Mensaje de instalación
        printf "\t%b\n" "${BLD}${CBL}Installing reflector to get the best mirrors...${CNC}"
        sudo pacman -Syy 2>&1 | tee -a "$ERROR_LOG" >/dev/null
        sudo pacman -S reflector --noconfirm 2>&1 | tee -a "$ERROR_LOG" >/dev/null
    fi
}

welcome() {
    clear
    logo "Welcome $USER"

    printf "%b" "${BLD}${CGR}This script will install my dotfiles and this is what it will do:${CNC}

  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} 2 Repositories will be installed. ${CBL}gh0stzk-dotfiles${CNC} and ${CBL}Chaotic-Aur${CNC}
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Check necessary dependencies and install them
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Download my dotfiles in ${HOME}/dotfiles
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Backup of possible existing configurations (bspwm, polybar, etc...)
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Install my configuration
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Enabling MPD service (Music player daemon)
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Change your shell to zsh shell

${BLD}${CGR}[${CRE}!${CGR}]${CNC} ${BLD}${CRE}My dotfiles DO NOT modify any of your system configurations${CNC}
${BLD}${CGR}[${CRE}!${CGR}]${CNC} ${BLD}${CRE}This script does NOT have the potential power to break your system${CNC}

"

    while :; do
        printf " %b" "${BLD}${CGR}Do you wish to continue?${CNC} [y/N]: "
        read -r yn
        case "$yn" in
            [Yy])
                break ;;
            [Nn]|"")
                printf "\n%b\n" "${BLD}${CYE}Operation cancelled${CNC}"
                exit 0 ;;
            *)
                printf "\n%b\n" "${BLD}${CRE}Error:${CNC} Just write '${BLD}${CYE}y${CNC}' or '${BLD}${CYE}n${CNC}'" ;;
        esac
    done
}

install_dependencies() {
    clear
    logo "Installing needed packages from official repositories..."
    sleep 2

    # Ensure reflector is installed and update mirrorlist
    is_reflector
    printf "%b\n\n" "${BLD}${CGR}Getting the 5 best and fastest mirrors${CNC}"
    sudo reflector --verbose --age 12 --fastest 10 --score 10 --protocol https --latest 5 --sort rate --save /etc/pacman.d/mirrorlist
    sudo pacman -Syy

    # List of dependencies
    dependencies="alacritty base-devel git xorg xorg-xinit xorg-xrandr xorg-xsetroot xf86-input-libinput bspwm sxhkd picom dunst rofi alacritty feh xclip lxappearance qt5ct ttf-jetbrains-mono-nerd ttf-font-awesome noto-fonts noto-fonts-emoji pipewire pipewire-pulse wireplumber alsa-utils pavucontrol networkmanager unzip tar polkit dbus papirus-icon-theme gnome-themes-extra xorg xorg-xinit xorg-xrandr xorg-xsetroot xf86-input-libinput xclip ttf-font-awesome ttf-jetbrains-mono-nerd feh unzip tar alsa-utils pipewire wireplumber
 base-devel bat brightnessctl bspwm clipcat dunst eza feh fzf  git  jq jgmenu  flameshot mpc mpd mpv neovim ncmpcpp pamixer pacman-contrib papirus-icon-theme picom playerctl lxsession-gtk3 python-gobject  rofi rustup sxhkd tmux xclip xdg-user-dirs xdo xdotool xsettingsd xorg-xdpyinfo xorg-xkill xorg-xprop xorg-xrandr xorg-xsetroot xorg-xwininfo zsh zsh-autosuggestions zsh-syntax-highlighting ttf-inconsolata ttf-jetbrains-mono ttf-jetbrains-mono-nerd ttf-terminus-nerd ttf-ubuntu-mono-nerd"

    printf "\n%b\n\n" "${BLD}${CBL}Checking for required packages...${CNC}"
    sleep 2

    # Detect missing packages
    missing_pkgs=""
    for pkg in $dependencies; do
        if ! is_installed "$pkg"; then
            missing_pkgs="$missing_pkgs $pkg"
            printf "%b\n" " ${BLD}${CYE}$pkg ${CRE}not installed${CNC}"
        else
            printf "%b\n" "${BLD}${CGR}$pkg ${CBL}already installed${CNC}"
        fi
    done

    # Batch installation if needed
    if [ -n "$(printf "%s" "$missing_pkgs" | tr -s ' ')" ]; then
        count=$(printf "%s" "$missing_pkgs" | wc -w)
        printf "\n%b\n\n" "${BLD}${CYE}Installing $count packages, please wait...${CNC}"

        if sudo pacman -S --noconfirm $missing_pkgs 2>&1 | tee -a "$ERROR_LOG" >/dev/null; then
            # Verify complete installation
            failed_pkgs=""
            for pkg in $missing_pkgs; do
                if ! is_installed "$pkg"; then
                    failed_pkgs="$failed_pkgs $pkg"
                    log_error "Failed to install: $pkg"
                fi
            done

            # Show final results
            if [ -z "$(printf "%s" "$failed_pkgs" | tr -s ' ')" ]; then
                printf "%b\n\n" "${BLD}${CGR}All packages installed successfully!${CNC}"
            else
                fail_count=$(printf "%s" "$failed_pkgs" | wc -w)
                printf "%b\n" "${BLD}${CRE}Failed to install $fail_count packages:${CNC}"
                printf "%b\n\n" "  ${BLD}${CYE}$(printf "%s" "$failed_pkgs")${CNC}"
            fi
        else
            log_error "Critical error during batch installation"
            printf "%b\n" "${BLD}${CRE}Installation failed! Check log for details${CNC}"
            return 1
        fi
    else
        printf "%b\n" "\n${BLD}${CGR}All dependencies are already installed!${CNC}"
    fi

    sleep 3
}


install_aur_dependencies() {
    # ─────────────────────────────────────────────────────────────
    # 📦 Install yay and paru from AUR using /opt/apps build dir
    # ─────────────────────────────────────────────────────────────

    printf "\n%b\n" "${BLD}${CBL}Installing AUR helpers (yay & paru)...${CNC}"
    AUR_HELPER_DIR="/opt/apps"
    sudo mkdir -p "$AUR_HELPER_DIR"
    sudo chown "$USER:$USER" "$AUR_HELPER_DIR"

    for helper in paru yay; do
        if ! command -v "$helper" &>/dev/null; then
            printf "%b\n" "${BLD}${CBL}Cloning and building: $helper${CNC}"
            cd "$AUR_HELPER_DIR" || continue
            git clone "https://aur.archlinux.org/${helper}.git"
            cd "${helper}" || continue
            makepkg -si --noconfirm >> "$ERROR_LOG" 2>&1
            printf "%b\n" "${BLD}${CGR}$helper installed successfully!${CNC}"
            cd ..
        else
            printf "%b\n" "${BLD}${CGR}$helper already installed.${CNC}"
        fi
    done
    clear
    logo "Installing AUR dependencies..."
    sleep 2

    # AUR Package List
    aur_apps="xqp xwinwrap-0.9-bin"

    printf "%b\n\n" "${BLD}${CBL}Checking for required AUR packages...${CNC}"
    sleep 2

    # Detect missing AUR packages
    missing_aur=""
    for pkg in $aur_apps; do
        if ! is_installed "$pkg"; then
            missing_aur="$missing_aur $pkg"
            printf "%b\n" " ${BLD}${CYE}$pkg ${CRE}not installed${CNC}"
        else
            printf "%b\n" "${BLD}${CGR}$pkg ${CBL}already installed${CNC}"
        fi
    done

    # Batch AUR installation if needed
    if [ -n "$(printf "%s" "$missing_aur" | tr -s ' ')" ]; then
        count=$(printf "%s" "$missing_aur" | wc -w)
        printf "\n%b\n\n" "${BLD}${CYE}Installing $count AUR packages, please wait...${CNC}"

        aur_failed=""
        for pkg in $missing_aur; do
            printf "%b\n" "${BLD}${CBL}Processing: ${pkg}${CNC}"

            if paru -S --skipreview --noconfirm "$pkg" >> "$ERROR_LOG" 2>&1; then
                printf "%b\n" "  ${BLD}${CGR}Successfully installed!${CNC}"
            else
                log_error "AUR package installation failed: $pkg"
                aur_failed="$aur_failed $pkg"
                printf "%b\n" "  ${BLD}${CRE}Installation failed!${CNC}"
            fi
            sleep 0.5
        done

        # Show final summary
        if [ -n "$(printf "%s" "$aur_failed" | tr -s ' ')" ]; then
            fail_count=$(printf "%s" "$aur_failed" | wc -w)
            printf "%b\n" "\n${BLD}${CRE}Failed $fail_count/$count AUR packages:${CNC}"
            printf "%b\n\n" "${BLD}${CYE}$(printf "%s" "$aur_failed")${CNC}"
        else
            printf "\n%b\n\n" "${BLD}${CGR}All AUR packages installed successfully!${CNC}"
        fi
    else
        printf "\n%b\n\n" "${BLD}${CGR}All AUR dependencies are already installed!${CNC}"
    fi

    sleep 3

    
}

clone_dotfiles() {
    clear
    logo "Downloading dotfiles"
    repo_url="https://github.com/IamGenarov/blackbspwm"
    repo_dir="$HOME/blackbswpm"
    timestamp=$(date +"%Y%m%d-%H%M%S")
    sleep 3

    # Handle existing repository
    if [ -d "$repo_dir" ]; then
        backup_dir="${repo_dir}_$timestamp"
        printf "%b\n" "${BLD}${CYE}Existing repository found - renaming to: ${CBL}${backup_dir}${CNC}"

        mv -v "$repo_dir" "$backup_dir"
    fi

    # Clone new repository
    printf "%b\n" "${BLD}${CYE}Cloning dotfiles from: ${CBL}${repo_url}${CNC}"
    if git clone --depth=1 "$repo_url" "$repo_dir" >> "$ERROR_LOG" 2>&1; then
        printf "%b\n\n" "${BLD}${CGR}Dotfiles cloned successfully!${CNC}"
    else
        log_error "Repository clone failed"
        printf "%b\n" "${BLD}${CRE}Clone failed! Check ${CYE}$ERROR_LOG${CNC}"
        return 1
    fi

    sleep 3
 
echo "📁 Iniciando configuración de entorno personal..."

# --- 🗂️ Crear carpetas estándar del $HOME ---
echo "📂 Creando carpetas estándar en $HOME..."

mkdir -p "$HOME/Desktop"
mkdir -p "$HOME/Documents"
mkdir -p "$HOME/Downloads"
mkdir -p "$HOME/Pictures"
mkdir -p "$HOME/Music"
mkdir -p "$HOME/Videos"
mkdir -p "$HOME/Pictures/.wallpapers"

echo "✅ Carpetas estándar creadas (incluye ~/Pictures/.wallpapers)."

# --- 🔧 Dotfiles en ~/.config ---
config_dirs=(
  "alacritty"
  "bspwm"
  "dunst"
  "eww"
  "nvim"
  "picom"
  "rofi"
)

echo "📦 Copiando configuraciones a ~/.config/..."

mkdir -p "$HOME/.config"

for dir in "${config_dirs[@]}"; do
  if [ -d "$dir" ]; then
    echo "📁 $dir → ~/.config/$dir"
    rm -rf "$HOME/.config/$dir"
    cp -r "$dir" "$HOME/.config/"
  else
    echo "⚠️  $dir no encontrado en el directorio actual. Saltando..."
  fi
done

# --- 🏠 Archivos y carpetas ocultas en $HOME ---
home_items=(
  ".bin"
  ".icons/default"
  ".gtkrc-2.0"
)

echo "📦 Copiando archivos y carpetas a $HOME/..."

for item in "${home_items[@]}"; do
  dest="$HOME/$item"
  src="$item"

  mkdir -p "$(dirname "$dest")"

  if [ -e "$src" ]; then
    echo "📁 $src → $dest"
    rm -rf "$dest"
    cp -r "$src" "$dest"
  else
    echo "⚠️  $src no encontrado. Saltando..."
  fi
done

echo -e "\n✅ Todo listo. ¡Tu entorno ha sido configurado correctamente!"
}



change_default_shell() {
    clear
    logo "Changing default shell to zsh"
    zsh_path=$(command -v zsh)
    sleep 3

    if [ -z "$zsh_path" ]; then
        log_error "Zsh binary not found"
        printf "%b\n\n" "${BLD}${CRE}Zsh is not installed! Cannot change shell${CNC}"
        return 1
    fi

    if [ "$SHELL" != "$zsh_path" ]; then
        printf "%b\n" "${BLD}${CYE}Changing your shell to Zsh...${CNC}"

        if chsh -s "$zsh_path"; then
            printf "%b\n" "\n${BLD}${CGR}Shell changed successfully!${CNC}"
        else
            printf "%b\n\n" "\n${BLD}${CRE}Error changing shell!{CNC}"
        fi
    else
        printf "%b\n\n" "${BLD}${CGR}Zsh is already your default shell!${CNC}"
    fi

    sleep 3
}

final_prompt() {
    clear
    logo "Installation Complete"

    printf "%b\n" "${BLD}${CGR}Installation completed successfully!${CNC}"
    printf "%b\n\n" "${BLD}${CRE}You ${CBL}MUST ${CRE}restart your system to apply changes${CNC}"

    while :; do
        printf "%b" "${BLD}${CYE}Reboot now?${CNC} [y/N]: "
        read -r yn
        case "$yn" in
            [Yy]) printf "\n%b\n" "${BLD}${CGR}Initiating reboot...${CNC}"
                sleep 1
                sudo reboot
                break ;;
            [Nn]|"") printf "\n%b\n\n" "${BLD}${CYE}You really need to reboot bro!!${CNC}"
                    break ;;
            *) printf " %b%bError:%b write 'y' or 'n'\n" "${BLD}" "${CRE}" "${CNC}" ;;
        esac
    done
}

# --- Main run --- #
initial_checks
welcome

install_dependencies
install_aur_dependencies
clone_dotfiles

change_default_shell
final_prompt
